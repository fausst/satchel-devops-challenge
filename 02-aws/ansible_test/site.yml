---
- name: A simple Load Balanced AWS server
  hosts: localhost 
  connection: local
  gather_facts: False
  tasks:
    - name: Create security group
      ec2_group:
        name: "demo_security_group"
        description: "demo security group"
        region: "{{ region }}"
        rules:
          - proto: tcp  # ssh
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # http
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp  # https
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: demo_firewall

    - name: Create an EC2 instance
      ec2:
        key_name: "{{ pem_key }}"
        region: "{{ region }}"
        group_id: "{{ demo_firewall.group_id }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami }}"
        wait: yes
        instance_tags:
            env: "{{ env }}"
        count_tag: env
        exact_count: 2
        assign_public_ip: yes
        vpc_subnet_id: "{{ default_subnet }}" 
      register: ec2

    - name: wait for the servers to appear on the network
      wait_for: host={{ item.public_dns_name }} port=22 delay=10 timeout=180 state=started
      with_items: "{{ ec2.instances }}"

    - name: add server ip addresses to hosts group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ ec2.instances }}"

# install packages  
- name: packages installation
  hosts: all 
  remote_user: ubuntu
  become: true
  #become_method: sudo
  gather_facts: True
  roles:
    - packages 

#Add keys
- name: Add user keys
  hosts: all 
  become: true
  become_method: sudo
  remote_user: ubuntu
  roles:
    - addkey

#Django app pull
- hosts: all
  become: yes
  become_user: ubuntu
  gather_facts: no
  tasks:
  - name: pull branch master
    git:
      repo='{{ repo_url }}/{{ repo }}.git'
      dest={{ repo_dir }}
      force=yes
      #accept_hostkey=yes

#Django requirements
- hosts: all
  gather_facts: no
  become: yes 
  become_user: root 
  tasks:
  - name: install python requirements
    pip: requirements={{ repo_dir }}/requirements/production.txt extra_args=--upgrade

# install postgresql  
- name: postresql installation
  hosts: all 
  become: yes 
  become_user: postgres
  gather_facts: no 
  roles:
    - postgresql 

# Deploy django app 
- name: Django deploy 
  hosts: all 
  become: yes 
  become_user: ubuntu
  gather_facts: no
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_project }}.settings.production"
    DATABASE_URL: postgres://{{ dbuser }}:{{ dbpassword }}@localhost/{{ dbname }}
    STATIC_ROOT: "{{ static_dir }}"
  roles:
    - django 

- name: spin up the load balancer and add the servers to it
  hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: setup a simple load balancer
      ec2_elb_lb:
        name: awselbdemo
        state: present
        region: "{{ region }}"
        zones:
          - us-east-2a
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: awselbdemo

    - name: add the webservers to the load balancer
      local_action: ec2_elb
      args:
        instance_id: "{{ item.id}}"
        ec2_elbs: awselbdemo
        state: present
        region: "{{ region }}"
      with_items: "{{ ec2.instances }}"

    - name: Register ELB with variable
      add_host:
        name: "DUMMY_HOST"
        my_elb: "{{ awselbdemo }}"

- hosts: localhost 
  gather_facts: no 
  tasks:
  - name: generating settnigs/production.py
    template: src=./config/templates/production.j2 dest=./config/templates/production.py

# nginx and django config 
- name: nginx and django config
  hosts: all 
  become: yes
  become_user: root
  gather_facts: no 
  roles:
    - config

- name: Making some confs... 
  hosts: all
  become: yes
  become_user: root 
  gather_facts: no
  tasks:
    - name: get public IP
      ipify_facts:
      register: public_ip

    - name: Pointing real IP to nginx server
      lineinfile:
        path: "/etc/nginx/sites-enabled/{{ django_project }}"
        regexp: '.+X-Real-IP'
        line: "proxy_set_header X-Real-IP {{ public_ip['ansible_facts']['ipify_public_ip'] }};"

    - name: Modifing http messagge
      lineinfile:
        path: "{{ django_dir }}/{{ django_project }}/views.py"
        regexp: '.+HttpResponse'
        line: "    return HttpResponse('Hello world FROM SERVER {{ public_ip['ansible_facts']['ipify_public_ip'] }}!')"

- name: restart nginx and supervisor 
  hosts: all 
  become: yes
  become_user: root
  gather_facts: no 
  tasks:
    - name: supervisor reload
      supervisorctl: name=yourproject state=present

    - name: supervisor update and restart 
      supervisorctl: name=yourproject state=restarted

    - name: nginx restart
      service: name=nginx state=restarted
      when: nginx_config.changed
